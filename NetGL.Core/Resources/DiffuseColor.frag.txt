#version 150 core

//NetGL-GlobalUniforms
//NetGL-StandartUniforms

uniform int uniform_Shininess = 0;
uniform vec4 uniform_Color = vec4(1.0);

out vec4 fragColor; 

in vec3 vertPosition;
in vec3 vertNormal;
in vec2 vertTexCoord;

void main() {
	vec3 color = uniform_Color.xyz;
	vec3 diffuse = uniform_Ambient * color;
	vec4 specular = vec4(0);

	for(int i = 0; i < uniform_LightCount; ++i) {
		vec3 lightVec= vec3(0);
		float attenuation = 1;
		Light light = uniform_Light[i];

		if(light.Type == 0) {
			attenuation = 1;
			lightVec = light.Direction;
		}
		if(light.Type == 1) {			
			lightVec = light.Position - vertPosition;
			float distance = length(lightVec);
			lightVec = normalize(lightVec);
			attenuation = 1.0 / (light.Attenuation.x
                           + light.Attenuation.y * distance
                           + light.Attenuation.z * distance * distance);
		}

		float lambertFactor = dot(vertNormal, lightVec);

		if(lambertFactor > 0) {
			vec3 diff = color * lambertFactor * light.Diffuse;

			attenuation = clamp(attenuation, 0, 1);
			diffuse += diff * attenuation;

			if(uniform_Shininess > 0) {			
				vec3 v = -normalize(vertPosition);
				vec3 r = -reflect(lightVec, vertNormal);
				float specFactor = clamp(pow(max(0.0, dot(r, v)), uniform_Shininess), 0, 1);
				specular += vec4(light.Diffuse * specFactor, specFactor);
			}
		}
	}
	
	fragColor = vec4(diffuse, uniform_Color.w) + specular;
}