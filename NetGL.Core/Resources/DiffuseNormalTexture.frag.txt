#version 150 core

//NetGL-GlobalUniforms
//NetGL-StandartUniforms

uniform int uniform_Shininess = 0;
uniform vec4 uniform_Color = vec4(1);
uniform sampler2D uniform_MainTexture;
uniform sampler2D uniform_NormalMap;

out vec4 fragColor; 

in vec2 vertTexCoord;
in vec3 vertPosition;
in vec3 eyeVec;
in vec3 lightVec[MAX_LIGHTS];

void main() {
	vec4 color = uniform_Color * texture(uniform_MainTexture, vertTexCoord);
	vec3 diffuse = uniform_Ambient * color.xyz;	
	vec4 specular = vec4(0);
	
	vec3 normal = texture2D(uniform_NormalMap, vertTexCoord).xyz;
	normal = normalize(normal * 2.0 - 1.0);
	
	for(int i = 0; i < uniform_LightCount; ++i) {
		vec3 lVec = lightVec[i];
		float attenuation = 1;
		Light light = uniform_Light[i];

		if(light.Type == 0)
			attenuation = 1;
		if(light.Type == 1) {
			float distance = length(lVec);
			lVec = normalize(lVec);
			attenuation = 1.0 / (light.Attenuation.x
                           + light.Attenuation.y * distance
                           + light.Attenuation.z * distance * distance);
		}		

		float lambertFactor = dot(normal, lVec);
		if(lambertFactor > 0) {
			vec3 diff = color.xyz * lambertFactor * uniform_Light[i].Diffuse;

			attenuation = clamp(attenuation, 0, 1);
			diffuse += diff * attenuation;

			if(uniform_Shininess > 0) {			
				vec3 v = -normalize(vertPosition);
				vec3 r = -reflect(lVec, normal);
				float specFactor = clamp(pow(max(0.0, dot(r, v)), uniform_Shininess), 0, 1);
				specular += vec4(light.Diffuse * specFactor, specFactor);
			}
		}
	}
	
	fragColor = vec4(diffuse, uniform_Color.w) + specular;
}