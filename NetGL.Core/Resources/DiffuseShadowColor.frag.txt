#version 150 core

//NetGL-GlobalUniforms
//NetGL-StandartUniforms

uniform int uniform_Shininess = 0;
uniform vec4 uniform_Color = vec4(1.0);
uniform sampler2DShadow uniform_ShadowTexture;

out vec4 fragColor; 

in vec3 vertPosition;
in vec3 vertNormal;
in vec2 vertTexCoord;
in vec3 shadowCoord;

void main() {
	float shadow = 1;
	if(uniform_LightCastingShadowNumber != -1)
		shadow = max(0.4, texture(uniform_ShadowTexture, shadowCoord));

	vec4 color = uniform_Color;
	vec3 diffuse = uniform_Ambient * color.xyz;

	for(int i = 0; i < uniform_LightCount; ++i)
	{
		vec3 lightVec= vec3(0);
		float attenuation = 1;
		Light light = uniform_Light[i];

		if(light.Type == 0)
		{
			attenuation = 1;
			lightVec = light.Direction;
		}
		if(light.Type == 1) {			
			lightVec = light.Position - vertPosition;
			float distance = length(lightVec);
			lightVec = normalize(lightVec);
			attenuation = 1.0 / (light.Attenuation.x
                           + light.Attenuation.y * distance
                           + light.Attenuation.z * distance * distance);
		}

		float lambertFactor = dot(vertNormal, lightVec);

		if(lambertFactor > 0) {
			vec3 diff = color.xyz * lambertFactor * light.Diffuse;
			if (i == uniform_LightCastingShadowNumber)
				diff *= shadow;

			attenuation = clamp(attenuation, 0, 1);
			diffuse += diff * attenuation;

			if(uniform_Shininess > 0)
			{			
				vec3 v = -normalize(vertPosition);
				vec3 r = -reflect(lightVec, vertNormal);
				diffuse += pow(max(0.0, dot(r, v)), uniform_Shininess);
			}
		}
	}
	
	fragColor = vec4(diffuse, 1);
}