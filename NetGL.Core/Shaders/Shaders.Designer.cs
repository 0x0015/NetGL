//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetGL.Core.Shaders {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Shaders {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Shaders() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NetGL.Core.Shaders.Shaders", typeof(Shaders).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-StandartUniforms
        ///
        ///in vec4 in_Position;
        ///
        ///uniform vec3 uniform_Size;
        ///uniform vec3 uniform_Center;
        ///
        ///void main(void) {
        ///	vec3 pos = uniform_Center + in_Position;
        ///	pos = pos * uniform_Size;
        ///	gl_Position = uniform_ModelViewProjectionMatrix * pos;
        ///}.
        /// </summary>
        public static string BoundingVolume_vert {
            get {
                return ResourceManager.GetString("BoundingVolume_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core 
        ///
        /////NetGL-StandartUniforms
        ///
        ///uniform vec4 uniform_Color;
        ///
        ///out vec4 color;
        ///
        ///void main(void) {
        ///    color = uniform_Color;
        ///}.
        /// </summary>
        public static string Color_frag {
            get {
                return ResourceManager.GetString("Color_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-StandartUniforms
        ///
        ///in vec4 in_Position;
        ///
        ///void main(void) {
        ///	gl_Position = uniform_ModelViewProjectionMatrix * in_Position;
        ///}.
        /// </summary>
        public static string Color_vert {
            get {
                return ResourceManager.GetString("Color_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-GlobalUniforms
        /////NetGL-StandartUniforms
        ///
        ///in vec4 in_Position;
        ///in vec3 in_Normal;
        ///in vec2 in_TexCoord;
        ///
        ///out vec3 vertPosition;
        ///out vec3 vertNormal;
        ///out vec2 vertTexCoord;
        ///
        ///void main() {
        ///	gl_Position = uniform_ModelViewProjectionMatrix * in_Position;
        ///
        ///	vertNormal = normalize(uniform_NormalMatrix * in_Normal);  	
        ///    vertTexCoord = in_TexCoord;
        ///	vertPosition = (uniform_ModelViewMatrix * in_Position).xyz;
        ///}.
        /// </summary>
        public static string Diffuse_vert {
            get {
                return ResourceManager.GetString("Diffuse_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-GlobalUniforms
        /////NetGL-StandartUniforms
        ///
        ///uniform int uniform_Shininess = 0;
        ///uniform vec4 uniform_Color = vec4(1.0);
        ///
        ///out vec4 fragColor; 
        ///
        ///in vec3 vertPosition;
        ///in vec3 vertNormal;
        ///in vec2 vertTexCoord;
        ///
        ///void main() {
        ///	vec3 color = uniform_Color.xyz;
        ///	vec3 diffuse = uniform_Ambient * color;
        ///	vec4 specular = vec4(0);
        ///
        ///	for(int i = 0; i &lt; uniform_LightCount; ++i) {
        ///		vec3 lightVec= vec3(0);
        ///		float attenuation = 1;
        ///		Light light = uniform_Light[i];
        ///
        ///		if(light.Type == 0) {
        ///			attenu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DiffuseColor_frag {
            get {
                return ResourceManager.GetString("DiffuseColor_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-GlobalUniforms
        /////NetGL-StandartUniforms
        ///
        ///in vec4 in_Position;
        ///in vec3 in_Normal;
        ///in vec3 in_Tangent;
        ///in vec2 in_TexCoord;
        ///
        ///out vec2 vertTexCoord;
        ///out vec3 vertPosition;
        ///out vec3 eyeVec;
        ///out vec3 lightVec[MAX_LIGHTS];
        ///
        ///void main() {
        ///	gl_Position = uniform_ModelViewProjectionMatrix * in_Position;
        ///    vertTexCoord = in_TexCoord;
        ///
        ///	vec3 n = normalize(uniform_NormalMatrix * in_Normal);
        ///	vec3 t = normalize(uniform_NormalMatrix * in_Tangent);
        ///	vec3 b = cross(n, t);	
        /// 
        ///	vertPosition = (un [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DiffuseNormal_vert {
            get {
                return ResourceManager.GetString("DiffuseNormal_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-GlobalUniforms
        /////NetGL-StandartUniforms
        ///
        ///uniform int uniform_Shininess = 0;
        ///uniform vec4 uniform_Color = vec4(1);
        ///uniform sampler2D uniform_MainTexture;
        ///uniform sampler2D uniform_NormalMap;
        ///
        ///out vec4 fragColor; 
        ///
        ///in vec2 vertTexCoord;
        ///in vec3 vertPosition;
        ///in vec3 eyeVec;
        ///in vec3 lightVec[MAX_LIGHTS];
        ///
        ///void main() {
        ///	vec4 color = uniform_Color * texture(uniform_MainTexture, vertTexCoord);
        ///	vec3 diffuse = uniform_Ambient * color.xyz;	
        ///	vec4 specular = vec4(0);
        ///	
        ///	vec3 normal = text [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DiffuseNormalTexture_frag {
            get {
                return ResourceManager.GetString("DiffuseNormalTexture_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-GlobalUniforms
        /////NetGL-StandartUniforms
        ///
        ///#define SHADOW_BIAS 0.001
        ///
        ///in vec4 in_Position;
        ///in vec3 in_Normal;
        ///in vec2 in_TexCoord;
        ///
        ///out vec3 vertPosition;
        ///out vec3 vertNormal;
        ///out vec2 vertTexCoord;
        ///out vec3 shadowCoord;
        ///
        ///void main() {
        ///	gl_Position = uniform_ModelViewProjectionMatrix * in_Position;
        ///
        ///	vertNormal = normalize(uniform_NormalMatrix * in_Normal);  	
        ///    vertTexCoord = in_TexCoord;
        ///	vertPosition = (uniform_ModelViewMatrix * in_Position).xyz;	
        ///
        ///	if(uniform_LightCastingShado [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DiffuseShadow_vert {
            get {
                return ResourceManager.GetString("DiffuseShadow_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-GlobalUniforms
        /////NetGL-StandartUniforms
        ///
        ///uniform int uniform_Shininess = 0;
        ///uniform vec4 uniform_Color = vec4(1.0);
        ///uniform sampler2DShadow uniform_ShadowTexture;
        ///
        ///out vec4 fragColor; 
        ///
        ///in vec3 vertPosition;
        ///in vec3 vertNormal;
        ///in vec2 vertTexCoord;
        ///in vec3 shadowCoord;
        ///
        ///void main() {
        ///	float shadow = 1;
        ///	if(uniform_LightCastingShadowNumber != -1)
        ///		shadow = max(0.4, texture(uniform_ShadowTexture, shadowCoord));
        ///
        ///	vec4 color = uniform_Color;
        ///	vec3 diffuse = uniform_Ambient * color. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DiffuseShadowColor_frag {
            get {
                return ResourceManager.GetString("DiffuseShadowColor_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-GlobalUniforms
        /////NetGL-StandartUniforms
        ///
        ///uniform int uniform_Shininess = 0;
        ///uniform vec4 uniform_Color = vec4(1);
        ///uniform sampler2D uniform_MainTexture;
        ///
        ///out vec4 fragColor; 
        ///
        ///in vec3 vertPosition;
        ///in vec3 vertNormal;
        ///in vec2 vertTexCoord;
        ///
        ///void main() {
        ///	vec4 color = uniform_Color * texture(uniform_MainTexture, vertTexCoord);
        ///	vec3 diffuse = uniform_Ambient * color.xyz;	
        ///	vec4 specular = vec4(0);
        ///
        ///	for(int i = 0; i &lt; uniform_LightCount; ++i)	{
        ///		vec3 lightVec;
        ///		float attenuation [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DiffuseTexture_frag {
            get {
                return ResourceManager.GetString("DiffuseTexture_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core 
        ///
        /////NetGL-StandartUniforms
        ///
        ///in vec2 pass_TexCoord;
        ///
        ///uniform sampler2D uniform_MainTexture;
        ///uniform sampler2D uniform_DiscardTexture;
        ///uniform vec4 uniform_Color;
        ///uniform float uniform_DiscardFactor;
        ///
        ///out vec4 frag_Color;
        ///
        ///void main(void) {
        ///	vec3 rgbFactor = texture(uniform_DiscardTexture, pass_TexCoord).rgb * 0.333;
        ///	float factor = rgbFactor.r + rgbFactor.g + rgbFactor.b;
        ///	if(factor &lt; uniform_DiscardFactor)
        ///		discard;
        ///
        ///	vec4 texColor = texture(uniform_MainTexture, pass_TexCoord);
        ///	frag_Colo [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DiscardTexture_frag {
            get {
                return ResourceManager.GetString("DiscardTexture_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-StandartUniforms
        ///
        ///in vec4 in_Position;
        ///
        ///void main(void) {
        ///	gl_Position = uniform_ModelViewProjectionMatrix * in_Position;
        ///}.
        /// </summary>
        public static string Shadow_vert {
            get {
                return ResourceManager.GetString("Shadow_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-StandartUniforms
        ///
        ///uniform vec4 uniform_Color;
        ///uniform sampler2D uniform_MainTexture;
        ///
        ///in vec2 pass_TexCoord;
        ///
        ///out vec4 color;
        ///
        ///void main(void) {
        ///	color.xyz = uniform_Color.xyz;
        ///	color.w = uniform_Color.w * texture(uniform_MainTexture, pass_TexCoord).w;
        ///	if(color.w &lt;= 0.2)
        ///		discard;
        ///}.
        /// </summary>
        public static string Text_frag {
            get {
                return ResourceManager.GetString("Text_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-StandartUniforms
        ///
        ///in vec3 in_Position;
        ///in vec2 in_TexCoord0;
        ///
        ///out vec2 pass_TexCoord;
        ///
        ///void main(void) {
        ///	gl_Position = uniform_ModelViewProjectionMatrix * vec4(in_Position, 1.0);
        ///	pass_TexCoord = in_TexCoord0;
        ///}.
        /// </summary>
        public static string Text_vert {
            get {
                return ResourceManager.GetString("Text_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core 
        ///
        /////NetGL-StandartUniforms
        ///
        ///in vec2 pass_TexCoord;
        ///
        ///uniform sampler2D uniform_MainTexture;
        ///uniform vec4 uniform_Color;
        ///
        ///out vec4 frag_Color;
        ///
        ///void main(void) {
        ///	vec4 texColor = texture(uniform_MainTexture, pass_TexCoord);
        ///	frag_Color = uniform_Color * texColor;
        ///}.
        /// </summary>
        public static string Texture_frag {
            get {
                return ResourceManager.GetString("Texture_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-StandartUniforms
        ///
        ///in vec3 in_Position;
        ///in vec2 in_TexCoord;
        ///
        ///out vec4 pass_Color;
        ///out vec2 pass_TexCoord;
        ///
        ///void main(void) {
        ///	gl_Position = uniform_ModelViewProjectionMatrix * vec4(in_Position, 1.0);
        ///	pass_TexCoord = in_TexCoord;
        ///}.
        /// </summary>
        public static string Texture_vert {
            get {
                return ResourceManager.GetString("Texture_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 150 core
        ///
        /////NetGL-StandartUniforms
        ///
        ///in vec4 in_Position;
        ///in vec4 in_Color;
        ///
        ///out vec4 color;
        ///
        ///void main(void) {
        ///	gl_Position = uniform_ModelViewProjectionMatrix * in_Position;
        ///	color = in_Color;
        ///}.
        /// </summary>
        public static string VertexColor_vert {
            get {
                return ResourceManager.GetString("VertexColor_vert", resourceCulture);
            }
        }
    }
}
