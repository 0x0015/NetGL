//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetGL.SceneGraph {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NetGL.SceneGraph.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #if(__VERSION__ &gt; 420)
        ///	layout(early_fragment_tests) in;
        ///#endif
        ///
        ///layout(std140) uniform uniform_GlobalLights {
        ///	vec3 uniform_CameraPosition;		
        ///	int _offset0;
        ///};
        ///
        ///layout(std140) uniform uniform_Standart {
        ///	float uniform_Time;
        ///	uint uniform_ID;
        ///	mat4 uniform_ModelViewProjectionMatrix;
        ///	mat4 uniform_ModelViewMatrix;
        ///	mat4 uniform_ModelMatrix;
        ///	mat4 uniform_InversedModelMatrix;
        ///	mat3 uniform_NormalMatrix;
        ///};
        ///
        ///#if defined VERTEX_SHADER
        ///	in vec3 in_Position;	
        ///	in vec3 in_Normal;
        ///	in vec4 in_Color;
        ///	in vec3 in_Tan [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Deferred_1pass {
            get {
                return ResourceManager.GetString("Deferred_1pass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef VERTEX_SHADER
        ///	in vec3 in_Position;
        ///	in vec2 in_TexCoord0;
        ///	
        ///	out vec2 texCoord;
        ///	
        ///	void main(void) {
        ///		gl_Position = vec4(in_Position, 1);
        ///		texCoord = in_TexCoord0;
        ///	}
        ///#endif
        ///
        ///#ifdef FRAGMENT_SHADER
        ///	struct Light {
        ///		vec3 Position;
        ///		vec3 Direction;
        ///		vec3 Diffuse;
        ///		vec3 Attenuation;
        ///		int Type;   //0 - directional, 1 - point, 2 - spot
        ///	};
        ///	
        ///	layout(std140) uniform uniform_GlobalLights {
        ///		vec3 uniform_CameraPosition;
        ///		int _offset0;
        ///		vec3 uniform_Ambient;
        ///		int _offset1;	
        ///		
        ///		int uniform_LightC [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Deferred_2pass {
            get {
                return ResourceManager.GetString("Deferred_2pass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #if(__VERSION__ &gt; 420)
        ///	layout(early_fragment_tests) in;
        ///#endif
        ///
        ///#if defined USE_LIGHTING
        ///	struct Light {
        ///		vec3 Position;
        ///		vec3 Direction;
        ///		vec3 Diffuse;
        ///		vec3 Attenuation;
        ///		int Type;   //0 - directional, 1 - point, 2 - spot
        ///	};
        ///#endif
        ///
        ///layout(std140) uniform uniform_GlobalLights {
        ///	vec3 uniform_CameraPosition;		
        ///	int _offset0;
        ///	vec3 uniform_Ambient;
        ///	int _offset1;		
        ///				
        ///	#if defined USE_LIGHTING
        ///		int uniform_LightCount;
        ///		int uniform_LightCastingShadowNumber;	
        ///		Light uniform_Light[MAX_LIGHTS];
        ///	#en [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Forward {
            get {
                return ResourceManager.GetString("Forward", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(std430, binding=0) buffer variableBuffer {
        ///	uint MaxParticles;
        ///	uint CurrentParticles;
        ///	float Time;
        ///	float DeltaTime;
        ///};
        ///layout(std430, binding=1) buffer positionBuffer {
        ///	vec3 position[];
        ///};
        ///layout(std430, binding=2) buffer colorBuffer {
        ///	vec4 color[];
        ///};
        ///layout(std430, binding=3) buffer data1Buffer {
        ///	vec4 data1[];
        ///};
        ///layout(std430, binding=4) buffer data2Buffer {
        ///	vec4 data2[];
        ///};
        ///layout(std430, binding=5) buffer data3Buffer {
        ///	vec4 data3[];
        ///};
        ///
        ///layout (local_size_x = 256, local_size [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Particles_comp {
            get {
                return ResourceManager.GetString("Particles_comp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440 core 
        ///
        ///uniform sampler2D uniform_MainTexture;
        ///
        ///in vec4 color;
        ///in mat3 rotation;
        ///
        ///out vec4 frag_color;
        ///
        ///void main(void) {
        ///	vec3 texCoord = rotation * vec3(gl_PointCoord, 1);
        ///	frag_color = texture(uniform_MainTexture, texCoord.xy) * color;
        ///}.
        /// </summary>
        public static string Particles_frag {
            get {
                return ResourceManager.GetString("Particles_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440 core
        ///
        /////NetGL-StandartUniforms
        ///
        ///in vec4 in_Position;
        ///in vec4 in_Color;
        ///in vec4 in_Data1;
        ///
        ///out vec4 color;
        ///out mat3 rotation;
        ///
        ///void main(void) {
        ///	gl_Position = uniform_ModelViewProjectionMatrix * in_Position;
        ///	gl_PointSize = in_Data1.x / gl_Position.w;
        ///	color = in_Color;
        ///	color.a = color.a * clamp(gl_PointSize, 0, 1);
        ///
        ///	float sin = sin(in_Data1.y);
        ///	float cos = cos(in_Data1.y);
        ///	rotation = mat3(cos, -sin, 0.0, sin, cos, 0.0, (1.0 - cos - sin) * 0.5, (1.0 + sin - cos) * 0.5, 1.0);
        ///}.
        /// </summary>
        public static string Particles_vert {
            get {
                return ResourceManager.GetString("Particles_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform vec2 size;
        ///uniform vec2 position;
        ///uniform sampler2D texture1;
        ///
        ///#ifdef VERTEX_SHADER
        ///const vec2[] in_vertices = vec2[4]
        ///(
        ///	vec2( 0,  0),
        ///	vec2( 1,  0),
        ///	vec2( 0,  1),                                  
        ///	vec2( 1,  1)
        ///);
        ///
        ///const vec2[] in_texcoords = vec2[4]
        ///(
        ///	vec2(0, 0),
        ///	vec2(1, 0),
        ///	vec2(0, 1),
        ///	vec2(1, 1)
        ///);
        ///
        ///out vec2 texcoords;
        ///
        ///void main(void)
        ///{
        ///	vec2 position = in_vertices[gl_VertexID] * size + position;
        ///	gl_Position = vec4(position * 2.0 - vec2(1.0), 0.0, 1.0);
        ///	
        ///	texcoords = in_texcoords[gl_Ver [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Quad {
            get {
                return ResourceManager.GetString("Quad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform vec4 uniform_Color;
        ///uniform vec3 uniform_Emission;
        ///uniform float uniform_Reflectivity = 0.6;
        ///uniform samplerCube uniform_ReflectionTexture;
        ///
        ///in vec3 viewDir;
        ///in vec3 normalDir;
        ///
        ///fragment_info getFragment() {
        ///	vec3 normal = normalize(frag_in.normal);	
        ///	vec3 reflectedDirection = reflect(normalize(viewDir), normalize(normalDir));
        ///
        ///	fragment_info result;
        ///
        ///	result.emission = uniform_Reflectivity * texture(uniform_ReflectionTexture, reflectedDirection).xyz + uniform_Emission;
        ///	result.normal = normal;
        ///	res [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ReflectionDiffuseColorFragment {
            get {
                return ResourceManager.GetString("ReflectionDiffuseColorFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform vec4 uniform_Color;
        ///uniform sampler2D uniform_MainTexture;
        ///uniform vec3 uniform_Emission;
        ///uniform vec3 uniform_Rim  = vec3(0.6, 0.6, 0.8);
        ///uniform float uniform_RimPower = 4;
        ///
        ///fragment_info getFragment() {
        ///	vec3 normal = normalize(frag_in.normal);	
        ///	float rim = 1.0 - clamp(dot(-normalize(frag_in.view_dir), normal), 0, 1);
        ///
        ///	fragment_info result;
        ///
        ///	result.emission = uniform_Rim * pow (rim, uniform_RimPower) + uniform_Emission;
        ///	result.normal = normal;
        ///	result.albedo = uniform_Color * texture(uniform_ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RimDiffuseTextureColorFragment {
            get {
                return ResourceManager.GetString("RimDiffuseTextureColorFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform vec4 uniform_Color = vec4(1.0);
        ///uniform sampler2D uniform_MainTexture;
        ///uniform vec3 uniform_Emission;
        ///
        ///uniform vec3 uniform_Rim = vec3(0.6, 0.6, 0.8);
        ///uniform float uniform_RimPower = 4;
        ///
        ///uniform float uniform_Reflectivity = 0.6;
        ///uniform samplerCube uniform_ReflectionTexture;
        ///
        ///in vec3 viewDir;
        ///in vec3 normalDir;
        ///
        ///fragment_info getFragment() {
        ///	vec3 normal = normalize(frag_in.normal);	
        ///	vec3 reflectedDirection = reflect(normalize(viewDir), normalize(normalDir));
        ///	float rim = 1.0 - clamp(dot(-normaliz [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RimReflectionDiffuseTextureColorFragment {
            get {
                return ResourceManager.GetString("RimReflectionDiffuseTextureColorFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef FlatColor
        ///uniform vec4 uniform_Color = vec4(1.0);
        ///
        ///void getFragment(inout fragment_info fragment) {
        ///	fragment.emission = uniform_Color.xyz;
        ///	fragment.albedo.w = uniform_Color.w;
        ///}
        ///#endif
        ///
        ///#ifdef FlatVertexColor
        ///uniform vec4 uniform_Color = vec4(1.0);
        ///
        ///void getFragment(inout fragment_info fragment) {
        ///	fragment.emission = uniform_Color.xyz * frag_in.color.xyz;
        ///	fragment.albedo.w = uniform_Color.w * frag_in.color.w;
        ///}
        ///#endif
        ///
        ///#ifdef FlatTextureColor
        ///uniform vec4 uniform_Color = vec4(1.0);
        ///uniform sample [rest of string was truncated]&quot;;.
        /// </summary>
        public static string StandardShaders {
            get {
                return ResourceManager.GetString("StandardShaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform vec2 size;
        ///uniform vec2 position;
        ///uniform vec2 viewport_size;
        ///uniform vec4 color;
        ///uniform uint id;
        ///
        ///#ifdef VERTEX_SHADER
        ///const vec2[] in_vertices = vec2[4]
        ///(
        ///	vec2( 0,  0),
        ///	vec2( 1,  0),
        ///	vec2( 0,  1),                                  
        ///	vec2( 1,  1)
        ///);
        ///
        ///const vec2[] in_texcoords = vec2[4]
        ///(
        ///	vec2(0, 0),
        ///	vec2(1, 0),
        ///	vec2(0, 1),
        ///	vec2(1, 1)
        ///);
        ///
        ///out vec2 texcoords;
        ///
        ///void main(void)
        ///{
        ///	vec2 position = (in_vertices[gl_VertexID] * size + position) / viewport_size;
        ///	gl_Position = vec4(position * 2.0 - v [rest of string was truncated]&quot;;.
        /// </summary>
        public static string UI {
            get {
                return ResourceManager.GetString("UI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to out vec3 viewDir;
        ///out vec3 normalDir;
        ///
        ///vertex_info getVertex() {
        ///	vertex_info result;
        ///
        ///	result.model_pos = in_Position;
        ///	result.normal = in_Normal;
        ///	result.tangent = in_Tangent;
        ///	result.albedo = in_Color.xyz;
        ///
        ///    viewDir = (uniform_ModelMatrix * vec4(in_Position, 1)).xyz - uniform_CameraPosition;
        ///    normalDir = (uniform_InversedModelMatrix * vec4(in_Normal, 0)).xyz;
        ///
        ///	return result;
        ///}.
        /// </summary>
        public static string VertexReflection {
            get {
                return ResourceManager.GetString("VertexReflection", resourceCulture);
            }
        }
    }
}
